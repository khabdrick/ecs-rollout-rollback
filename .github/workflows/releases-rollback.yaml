name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: Build and push Docker image
        id: build-image
        run: |
          docker build -t khabdrick/ecsproject:${{ github.sha }} .
          docker push khabdrick/ecsproject:${{ github.sha }}
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/ecsproject:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/ecsproject:latest
      # - name: Replace image in task definition
      #   run: |
      #     sed "s|<IMAGE_NAME>|khabdrick/ecsproject:${{ github.sha }}|g" task-definition.json > task-definition.json


      # - name: Render Amazon ECS task definition
      #   id: render-api-container
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: api
      #     image: ${{ steps.build-image.outputs.image }}
      #     environment-variables: "LOG_LEVEL=info"

      # - name: Update ECS Service
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     service: ${{ secrets.ECS_SERVICE }}
      #     cluster: ${{ secrets.ECS_CLUSTER }}

      - name: Save Previous Image Tag
        run: echo "PREVIOUS_IMAGE_TAG=${{ github.sha }}" > previous_image_tag.txt
        id: save_previous_tag

      - name: Commit and Push Previous Image Tag
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add previous_image_tag.txt
          git commit -m "Update previous image tag"
          git push origin main
        if: ${{ steps.save_previous_tag.outputs.PREVIOUS_IMAGE_TAG }}

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment \
            --query 'service.deployments[0].taskDefinition' \
            --output text

      - name: Wait for service stabilization
        run: |
          for attempt in {1..10}; do
            if aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }}; then
              echo "Service stabilized on attempt $attempt"
              break
            else
              echo "Attempt $attempt failed, retrying..."
              sleep 30
            fi
          done

  rollback:
    runs-on: ubuntu-latest
    # needs: deploy
    if: github.event.inputs.action == 'rollback'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check for CloudWatch Alarms
        run: |
          CPU_ALARM_STATE=$(aws cloudwatch describe-alarms --alarm-names "HighCPUUtilization" --state-value ALARM --query 'MetricAlarms[0].StateValue' --region ${{ secrets.AWS_REGION }})
          MEMORY_ALARM_STATE=$(aws cloudwatch describe-alarms --alarm-names "HighMemoryUtilization" --state-value ALARM --query 'MetricAlarms[0].StateValue' --region ${{ secrets.AWS_REGION }})
          HTTP_ALARM_STATE=$(aws cloudwatch describe-alarms --alarm-names "HighHTTP5xxErrors" --state-value ALARM --query 'MetricAlarms[0].StateValue' --region ${{ secrets.AWS_REGION }})
          if [ "$CPU_ALARM_STATE" == "ALARM" ] || [ "$MEMORY_ALARM_STATE" == "ALARM" ] || [ "$HTTP_ALARM_STATE" == "ALARM" ]; then
            echo "ALARM"
          else
            echo "OK"
          fi
        continue-on-error: true
        id: check_alarm_state

      - name: Get Previous Image Tag
        id: get_previous_tag
        run: |
          PREVIOUS_IMAGE_TAG=$(cat previous_image_tag.txt)
          echo "::set-output name=tag::${PREVIOUS_IMAGE_TAG}"

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Rollback to previous task definition
        run: |
          PREV_TASK_DEF=$(aws ecs describe-services \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --services ${{ secrets.ECS_SERVICE }} \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $PREV_TASK_DEF

